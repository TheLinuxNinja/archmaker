#include "ArchMaker/scriptgenerator.hpp"

ScriptGenerator::ScriptGenerator(std::string distroname) : guilogin(false),
                                                            dmservice(""),
                                                            distname(distroname),
                                                            distdescr("") {
}

// Sets the distribution description.
void ScriptGenerator::set_distdescr(std::string distrodescr) {
  distdescr = distrodescr;
}
// Sets if gui-login is activated or not.
void ScriptGenerator::set_guilogin(bool guilogin) {
  this->guilogin = guilogin;
}
// Sets the display manager.
void ScriptGenerator::set_displaymanager(std::string displaymanager) {
  dmservice = displaymanager;
}

// Generates the script.
std::string ScriptGenerator::GenerateScript() {
  std::string final_script;
  final_script = "#!/bin/bash\n"
                  "if [ \"$EUID\" = 0 ]; then\n"
                  "  echo \"Please don't run this script as root!\"\n"
                  "  exit\n"
                  "fi\n"
                  "distroversion=\"\"\n"
                  "distrocodename=\"\"\n"
                  "echo \"Welcome to the generation script for '"+distname+"'\"\n"
                  "echo \"===========\"\n"
                  "if [ \"$1\" != \"\" ]; then\n"
                  "  distroversion=\"$1\"\n"
                  "  distrocodename=\"$2\"\n"
                  "else\n"
                  "  echo -n \"Please enter the current version of '"+distname+"' > \"\n"
                  "  read distroversion\n"
                  "  echo -n \"Please enter the current codename of '"+distname+"' > \"\n"
                  "  read distrocodename\n"
                  "fi\n"
                  "createdir() {\n"
                  "  sudo mkdir workingdir\n"
                  "  sudo cp -r /usr/share/archiso/configs/releng/* ./workingdir\n"
                  "}\n"
                  "copypackages() {\n"
                  "  sudo cp ./packages ./workingdir/packages.both\n"
                  "}\n"
                  "copyskel() {\n"
                  "  sudo mkdir ./workingdir/airootfs/etc/skel\n"
                  "  sudo cp -r ./skeldata/* ./workingdir/airootfs/etc/skel/\n";
  if (guilogin) {
    final_script += "  sudo ln -s /usr/lib/systemd/system/"+dmservice+".service ./workingdir/airootfs/etc/systemd/system/display-manager.service\n"
                      "  sudo sed -i \"s/multi-user.target/graphical.target/g\" ./workingdir/airootfs/root/customize_airootfs.sh\n";
  }
  final_script += "}\n"
                    "createlsbrelease() {\n"
                    "  echo \"lsb-release\" | sudo tee --append ./workingdir/packages.both > /dev/null\n"
                    "  echo \"DISTRIB_ID="+distname+"\" | sudo tee ./workingdir/airootfs/etc/lsb-release > /dev/null\n"
                    "  echo 'DISTRIB_DESCRIPTION=\""+distdescr+"\"' | sudo tee --append ./workingdir/airootfs/etc/lsb-release > /dev/null\n"
                    "  echo \"DISTRIB_RELEASE=$distroversion\" | sudo tee --append ./workingdir/airootfs/etc/lsb-release > /dev/null\n"
                    "  echo \"DISTRIB_CODENAME=$distrocodename\" | sudo tee --append ./workingdir/airootfs/etc/lsb-release > /dev/null\n"
                    "}\n"
                    "compilecalamares() {\n"
                    "  echo \"Preparing Repository...\"\n"
                    "  mkdir customrepo\n"
                    "  mkdir customrepo/x86_64\n"
                    "  mkdir customrepo/i686\n"
                    "  mkdir customrepo/archmaker-calamares\n"
                    "  echo \"Preparing Calamares-build...\"\n"
                    "  curl http://archmaker.guidedlinux.org/PKGBUILD > customrepo/archmaker-calamares/PKGBUILD\n"
                    "  FILES=\"calamaresslides/*\"\n"
                    "  currentslide=1\n"
                    "  for f in $FILES\n"
                    "  do\n"
                    "  currentline=$(( $currentslide + 27 ))\n"
                    "  sed -i \"${currentline}a\\ \\ \\ \\ cp $(pwd)\\/$f src\\/branding\\/custombranding\\/\" ./customrepo/archmaker-calamares/PKGBUILD\n"
                    "  echo \"    echo '    ' >> src/branding/custombranding/show.qml\" >> slideshowchanges\n"
                    "  echo \"    echo '    Slide {' >> src/branding/custombranding/show.qml\" >> slideshowchanges\n"
                    "  echo \"    echo '        ' >> src/branding/custombranding/show.qml\" >> slideshowchanges\n"
                    "  echo \"    echo '        Image {' >> src/branding/custombranding/show.qml\" >> slideshowchanges\n"
                    "  echo \"    echo '            id: background${currentslide}' >> src/branding/custombranding/show.qml\" >> slideshowchanges\n"
                    "  echo \"    echo '            source: \\\"${f##*/}\\\"' >> src/branding/custombranding/show.qml\" >> slideshowchanges\n"
                    "  echo \"    echo '            width: 800; height: 440' >> src/branding/custombranding/show.qml\" >> slideshowchanges\n"
                    "  echo \"    echo '            fillMode: Image.PreserveAspectFit' >> src/branding/custombranding/show.qml\" >> slideshowchanges\n"
                    "  echo \"    echo '            anchors.centerIn: parent' >> src/branding/custombranding/show.qml\" >> slideshowchanges\n"
                    "  echo \"    echo '        }' >> src/branding/custombranding/show.qml\" >> slideshowchanges\n"
                    "  echo \"    echo '    }' >> src/branding/custombranding/show.qml\" >> slideshowchanges\n"
                    "  currentslide=$(( $currentslide + 1 ))\n"
                    "  done\n"
                    "  sed -i \"s/DISTRNAME/'"+distname+"'/g\" ./customrepo/archmaker-calamares/PKGBUILD\n"
                    "  sed -i \"s/DISTRVERSION/${distroversion}/g\" ./customrepo/archmaker-calamares/PKGBUILD\n"
                    "  echo \"    echo '    ' >> src/branding/custombranding/show.qml\" >> slideshowchanges\n"
                    "  echo \"    echo '}' >> src/branding/custombranding/show.qml\" >> slideshowchanges\n"
                    "  lastline=$(( $currentslide + 27 ))\n"
                    "  sed -i '/mkdir -p build/r slideshowchanges' ./customrepo/archmaker-calamares/PKGBUILD\n"
                    "  rm slideshowchanges\n"
                    "  cd ./customrepo/archmaker-calamares\n"
                    "  makepkg --printsrcinfo > .SRCINFO\n"
                    "  cd ../\n"
                    "  echo \"Building qt5-styleplugins-git...\"\n"
                    "  git clone https://aur.archlinux.org/qt5-styleplugins-git.git\n"
                    "  cd qt5-styleplugins-git\n"
                    "  makepkg -si\n"
                    "  cp *.pkg.ta* ../x86_64\n"
                    "  cd ../\n"
                    "  echo \"Building calamares...\"\n"
                    "  cd archmaker-calamares\n"
                    "  makepkg -s\n"
                    "  cp *.pkg.ta* ../x86_64\n"
                    "  cd ../\n"
                    "  rm -rf qt5-styleplugins-git archmaker-calamares\n"
                    "  cd ../\n"
                    "  echo \"archmaker-calamares\" | sudo tee --append ./workingdir/packages.both > /dev/null\n"
                    "}\n"
                    "compileaurpkgs() {\n"
                    "  mkdir customrepo/custompkgs\n"
                    "  repopath=\"$(readlink -f .)\"\n"
                    "  buildingpath=\"$(readlink -f ./customrepo/custompkgs)\"\n"
                    "  while IFS='' read -r currentpkg || [[ -n \"$currentpkg\" ]]; do\n"
                    "    cd customrepo/custompkgs\n"
                    "    curl $currentpkg > ./currentpkg.tar.gz\n"
                    "    tar xf currentpkg.tar.gz\n"
                    "    rm currentpkg.tar.gz\n"
                    "    for d in */ ; do\n"
                    "      cd \"$d\"\n"
                    "    done\n"
                    "    makepkg -s\n"
                    "    cp *.pkg.ta* ../../x86_64\n"
                    "    cd $buildingpath\n"
                    "    for d in */ ; do\n"
                    "      rm -rf \"$d\"\n"
                    "    done\n"
                    "    cd $repopath\n"
                    "  done < \"aurpackages\"\n"
                    "  rm -rf customrepo/custompkgs\n"
                    "  unset repopath buildingpath\n"
                    "}\n"
                    "setuprepo() {\n"
                    "  cd customrepo/x86_64\n"
                    "  echo \"Adding packages to repository...\"\n"
                    "  repo-add customrepo.db.tar.gz *.pkg.ta*\n"
                    "  cd ../..\n"
                    "  echo \"[customrepo]\" | sudo tee --append ./workingdir/pacman.conf > /dev/null\n"
                    "  echo \"SigLevel = Never\" | sudo tee --append ./workingdir/pacman.conf > /dev/null\n"
                    "  echo \"Server = file://$(pwd)/customrepo/$(echo '$arch')\" | sudo tee --append ./workingdir/pacman.conf > /dev/null\n"
                    "  sudo pacman -Syy\n"
                    "  cat /etc/pacman.conf > ./pacman.backup\n"
                    "  echo \"[customrepo]\" | sudo tee --append /etc/pacman.conf > /dev/null\n"
                    "  echo \"SigLevel = Never\" | sudo tee --append /etc/pacman.conf > /dev/null\n"
                    "  echo \"Server = file://$(pwd)/customrepo/$(echo '$arch')\" | sudo tee --append /etc/pacman.conf > /dev/null\n"
                    "  sudo pacman -Syy\n"
                    "}\n"
                    "buildtheiso() {\n"
                    "  sudo rm -rf ./workingdir/airootfs/etc/systemd/system/getty*\n"
                    "  cd workingdir\n"
                    "  sudo ./build.sh -v\n"
                    "  cd ../\n"
                    "}\n"
                    "cleanup() {\n"
                    "  echo \"Cleaning up...\"\n"
                    "  cat ./pacman.backup | sudo tee /etc/pacman.conf > /dev/null\n"
                    "  sudo pacman -Syy\n"
                    "  rm ./pacman.backup\n"
                    "  sudo rm -rf /var/cache/pacman/pkg/archmaker-calamares*\n"
                    "  sudo rm -rf /var/cache/pacman/pkg/qt5-styleplugins-git*\n"
                    "  finalfiles=\"\"\n"
                    "  while IFS='' read -r currentpkg || [[ -n \"$currentpkg\" ]]; do\n"
                    "    finalfiles=\"$finalfiles /var/cache/pacman/pkg/$(cut -d'.' -f1 <<<\"${currentpkg##*/}\")*\"\n"
                    "  done < \"aurpackages\"\n"
                    "  echo \"Deleting files $finalfiles...\"\n"
                    "  sudo rm -rf $finalfiles\n"
                    "  rm -rf ./customrepo\n"
                    "  echo \"Saving iso file...\"\n"
                    "  cp ./workingdir/out/*.iso ./output.iso\n"
                    "  echo \"Removing archiso directory...\"\n"
                    "  sudo rm -rf workingdir\n"
                    "}\n"
                    "createdir\n"
                    "copypackages\n"
                    "copyskel\n"
                    "createlsbrelease\n"
                    "compilecalamares\n"
                    "compileaurpkgs\n"
                    "setuprepo\n"
                    "buildtheiso\n"
                    "cleanup\n";

  return final_script;
}